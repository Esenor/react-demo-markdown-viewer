{"version":3,"sources":["components/container/Container.js","components/container/Segment.js","components/ui/ToogleContainer.js","components/ui/Loader.js","components/App.js","serviceWorker.js","index.js","contexts/TextEditorContext.js"],"names":["Container","_ref","children","react_default","a","createElement","Container_Container","Segment","Segment_Segment","ToogleContainer","_ref$activeChildren","activeChildren","_ref$inactiveChildren","inactiveChildren","_ref$labelActive","labelActive","_ref$labelInactive","labelInactive","_ref$active","active","_useState","useState","_useState2","Object","slicedToArray","toggle","updateToggle","container_Container","container_Segment","Button","onClick","Loader","Loader_Loader","inline","MarkdownEditorContainer","React","lazy","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","Promise","all","__webpack_require__","e","then","bind","stop","MarkdownViewerContainer","_callee2","_context2","App","Suspense","fallback","ui_Loader","TextEditorContext","defaultValue","ui_ToogleContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","createContext","text","updateText","getText","useTextEditor","useContext","TextEditorProvider","_ref$children","react__WEBPACK_IMPORTED_MODULE_1___default","_ref$defaultValue","_Repositories_Efc_markdown_viewer_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","updateState","providerParameters","Provider","value"],"mappings":"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","file":"static/js/main.eed2ff95.chunk.js","sourcesContent":["import React from 'react'\nimport { Container as UiContainer } from 'semantic-ui-react'\n\nconst Container = ({ children }) => (<UiContainer>{children}</UiContainer>)\n\nexport default Container\n","import React from 'react'\nimport { Segment as UiSegment } from 'semantic-ui-react'\n\nconst Segment = ({ children }) => (<UiSegment>{children}</UiSegment>)\n\nexport default Segment\n","import React, { useState } from 'react'\nimport Container from '../container/Container'\nimport Segment from '../container/Segment'\nimport { Button } from 'semantic-ui-react'\n\nconst ToogleContainer = ({\n    activeChildren = (<div></div>),\n    inactiveChildren = (<div></div>),\n    labelActive = 'active',\n    labelInactive = 'inactive',\n    active = true \n  }) => {\n  const [toggle, updateToggle] = useState(active)\n  return (\n    <Container>\n      <Segment>\n        {(toggle)? (activeChildren): (inactiveChildren)}\n        <Button toggle active={toggle} onClick={() => updateToggle(!toggle)}>{(toggle) ? labelActive : labelInactive}</Button>\n      </Segment>\n    </Container>\n  )\n}\n\nexport default ToogleContainer\n","import React from 'react'\nimport { Loader as LoaderUi} from 'semantic-ui-react'\nimport Container from '../container/Container'\nimport Segment from '../container/Segment'\n\nconst Loader = () => (\n  <Container>\n    <Segment>\n      <LoaderUi active inline='centered' />\n    </Segment>\n  </Container>\n)\n\nexport default Loader\n","import React from 'react';\nimport ToogleContainer from './ui/ToogleContainer'\nimport Loader from './ui/Loader'\nimport { TextEditorProvider } from '../contexts/TextEditorContext'\n\nconst MarkdownEditorContainer = React.lazy(async () => import('../containers/textEditor/MarkdownEditor.container'))\nconst MarkdownViewerContainer = React.lazy(async () => import('../containers/textEditor/MarkdownViewer.container'))\n\nconst initialMarkdown = '![React icon](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/220px-React-icon.svg.png)\\n\\n# React demo\\n\\n## Markdown viewer\\n\\nThis repository is an React app example of:\\n\\n- React 16\\n- React Hooks\\n- React Context\\n\\n> The markdown parser is done with the node module `marked`\\n\\n> The UI is done with the node module `semantic-ui-css` and `semantic-ui-react`\\n\\n---'\n\nconst App = () => (\n  <React.Suspense fallback={<Loader />}>\n    <TextEditorProvider defaultValue={initialMarkdown}>\n      <ToogleContainer\n        activeChildren={<MarkdownEditorContainer />}\n        inactiveChildren={<MarkdownViewerContainer />}\n        labelActive=\"Save & render markdown\"\n        labelInactive=\"Edit markdown\"\n        active={false}\n      />\n    </TextEditorProvider>\n  </React.Suspense>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React, {useState, useContext} from 'react'\n\n/**\n * Text editor context\n */\nconst TextEditorContext = React.createContext({\n  text: '',\n  updateText: () => {},\n  getText: () => {}\n})\n\n/**\n * Text editor custom hook\n */\nexport const useTextEditor = () => useContext(TextEditorContext)\n\n/**\n * Text editor components provider (provide context methods to childs components)\n */\nexport const TextEditorProvider = ({children = (<div></div>), defaultValue = ''}) => {\n  const [state, updateState] = useState(defaultValue)\n\n  const updateText = (text) => updateState(text)\n  const getText = () => state\n\n  const providerParameters = { text: state, updateText, getText}\n\n  return (\n    <TextEditorContext.Provider value={providerParameters}>\n      {children}\n    </TextEditorContext.Provider>\n  )\n}\n\n\n"],"sourceRoot":""}