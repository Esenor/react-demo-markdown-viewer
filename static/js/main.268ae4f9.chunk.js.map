{"version":3,"sources":["components/ui/MarkdownViewer.js","contexts/TextEditorContext.js","containers/TextEditor/MarkdownViewer.container.js","components/ui/MarkdownEditor.js","containers/TextEditor/MarkdownEditor.container.js","components/container/Container.js","components/container/Segment.js","components/ui/ToogleContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["MarkdownViewer","_ref","src","react_default","a","createElement","dangerouslySetInnerHTML","__html","marked","TextEditorContext","React","createContext","text","updateText","getText","useTextEditor","useContext","TextEditorProvider","_ref$children","children","_ref$defaultValue","defaultValue","_useState","useState","_useState2","Object","slicedToArray","state","updateState","providerParameters","Provider","value","MarkdownViewerContainer","ui_MarkdownViewer","MarkdownEditor","onChange","Form","TextArea","rows","placeholder","event","target","MarkdownEditorContainer","_useTextEditor","ui_MarkdownEditor","Container","Container_Container","Segment","Segment_Segment","ToogleContainer","_ref$activeChildren","activeChildren","_ref$inactiveChildren","inactiveChildren","_ref$labelActive","labelActive","_ref$labelInactive","labelInactive","_ref$active","active","toggle","updateToggle","container_Container","container_Segment","Button","onClick","App","TextEditorContext_TextEditorProvider","ui_ToogleContainer","MarkdownEditor_container","MarkdownViewer_container","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.268ae4f9.chunk.js","sourcesContent":["import React from 'react'\nimport marked from 'marked'\n\nconst MarkdownViewer = ({ src }) => (<div dangerouslySetInnerHTML={{ __html: marked(src) }}></div>)\n\nexport default MarkdownViewer\n","import React, {useState, useContext} from 'react'\n\n/**\n * Text editor context\n */\nexport const TextEditorContext = React.createContext({\n  text: '',\n  updateText: () => {},\n  getText: () => {}\n})\n\n/**\n * Text editor custom hook\n */\nexport const useTextEditor = () => useContext(TextEditorContext)\n\n/**\n * Text editor components provider (provide context methods to childs components)\n */\nexport const TextEditorProvider = ({children = (<div></div>), defaultValue = ''}) => {\n  const [state, updateState] = useState(defaultValue)\n\n  const updateText = (text) => updateState(text)\n  const getText = () => state\n\n  const providerParameters = { text: state, updateText, getText}\n\n  return (\n    <TextEditorContext.Provider value={providerParameters}>\n      {children}\n    </TextEditorContext.Provider>\n  )\n}\n\n\n","import React from 'react'\nimport MarkdownViewer from '../../components/ui/MarkdownViewer'\nimport { useTextEditor } from '../../contexts/TextEditorContext'\n\nconst MarkdownViewerContainer = () => {\n  const { getText } = useTextEditor()\n  return (<MarkdownViewer src={getText()} />)\n}\n\nexport default MarkdownViewerContainer\n","import React from 'react'\nimport { Form, TextArea } from 'semantic-ui-react'\n\nconst MarkdownEditor = ({ src, onChange }) => (\n  <Form>\n    <TextArea rows=\"20\" placeholder='Tell us more' onChange={(event) => { onChange(event.target.value) }} defaultValue={src}/>\n  </Form>\n)\n\nexport default MarkdownEditor\n","import React from 'react'\nimport MarkdownEditor from '../../components/ui/MarkdownEditor'\nimport { useTextEditor } from '../../contexts/TextEditorContext'\n\nconst MarkdownEditorContainer = () => {\n  const { getText, updateText } = useTextEditor()\n  return (<MarkdownEditor src={getText()} onChange={(text) => updateText(text)} />)\n}\n\nexport default MarkdownEditorContainer\n","import React from 'react'\nimport { Container as UiContainer } from 'semantic-ui-react'\n\nconst Container = ({ children }) => (<UiContainer>{children}</UiContainer>)\n\nexport default Container\n","import React from 'react'\nimport { Segment as UiSegment } from 'semantic-ui-react'\n\nconst Segment = ({ children }) => (<UiSegment>{children}</UiSegment>)\n\nexport default Segment\n","import React, { useState } from 'react'\nimport Container from '../container/Container'\nimport Segment from '../container/Segment'\nimport { Button } from 'semantic-ui-react'\n\nconst ToogleContainer = ({\n    activeChildren = (<div></div>),\n    inactiveChildren = (<div></div>),\n    labelActive = 'active',\n    labelInactive = 'inactive',\n    active = true \n  }) => {\n  const [toggle, updateToggle] = useState(active)\n  return (\n    <Container>\n      <Segment>\n        {(toggle)? (activeChildren): (inactiveChildren)}\n        <Button toggle active={toggle} onClick={() => updateToggle(!toggle)}>{(toggle) ? labelActive : labelInactive}</Button>\n      </Segment>\n    </Container>\n  )\n}\n\nexport default ToogleContainer\n","import React from 'react';\nimport MarkdownViewerContainer from '../containers/TextEditor/MarkdownViewer.container'\nimport MarkdownEditorContainer from '../containers/TextEditor/MarkdownEditor.container'\nimport ToogleContainer from './ui/ToogleContainer'\nimport { TextEditorProvider } from '../contexts/TextEditorContext'\n\nconst initialMarkdown = '![React icon](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/220px-React-icon.svg.png)\\n\\n# React demo\\n\\n## Markdown viewer\\n\\nThis repository is an React app example of:\\n\\n- React 16\\n- React Hooks\\n- React Context\\n\\n> The markdown parser is done with the node module `marked`\\n\\n> The UI is done with the node module `semantic-ui-css` and `semantic-ui-react`\\n\\n---'\n\nconst App = () => (\n  <TextEditorProvider defaultValue={initialMarkdown}>\n    <ToogleContainer\n      activeChildren={<MarkdownEditorContainer />}\n      inactiveChildren={<MarkdownViewerContainer/>}\n      labelActive=\"Save & render markdown\"\n      labelInactive=\"Edit markdown\"\n      active={false}\n    />\n  </TextEditorProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}